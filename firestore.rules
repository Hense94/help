service cloud.firestore {
  match /databases/{database}/documents {
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
  
    function isAdmin() {
      return hasRole('admin')
    }
    
		function isTA(courseSlug) {
      return courseSlug in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.courses;
    }
    
    match /institutes/{documentId} {
      allow read;
      allow update: if isAdmin();
      allow create: if isAdmin();
      allow delete: if isAdmin();
    }
    
    match /courses/{documentId} {
      allow read;
      allow update: if isAdmin() || (isTA(request.resource.data.slug) && isTA(resource.data.slug));
      allow create: if isAdmin();
      allow delete: if isAdmin();
    }

    match /trash-cans/{documentId} {
      //allow create: if request.auth.uid == request.resource.data.uid;
    	//allow read, update: if isAdmin() || (isTA(request.resource.data.course) && isTA(resource.data.course)) || request.auth.uid == resource.data.uid;
      
      allow read, create, delete, update;
      //allow update: if isAdmin() || (isTA(request.resource.data.course) && isTA(resource.data.course));
    }

    match /posts/{documentId} {
      allow read;
      allow create: if isAdmin() || isTA(request.resource.data.course)
      allow update: if isAdmin() || (isTA(request.resource.data.course) && isTA(resource.data.course));
      allow delete: if isAdmin() || isTA(resource.data.course);
    }
    
		match /notificationTokens/{documentId} {
      allow read;
      allow create, update, delete: if request.auth.uid == resource.data.userId || request.auth.uid == request.resource.data.userId;
    }

    match /users/{userId} {
      function requestDoesNotChangeAdmin() {
      	return request.resource.data.admin == false;
      }

      function requestDoesNotChangeCourses() {
      	return request.resource.data.courses == resource.data.courses;
      }

      function requestChangesRoles() {
      	return !roleEqual('moderator') || !roleEqual('admin');
      }

      allow read, delete: if request.auth.uid == userId || isAdmin();
      allow create: if requestDoesNotChangeAdmin() && request.resource.data.courses == [];
      allow update: if isAdmin() || (request.auth.uid == userId && requestDoesNotChangeAdmin() && requestDoesNotChangeCourses());
    }
  }
}
