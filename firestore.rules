service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin;
    }
    
		function isTA(courseSlug) {
      return courseSlug in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.courses;
    }
    
    match /courses/{documentId} {
      allow read;
      allow update: if isAdmin() || (isTA(request.resource.data.slug) && isTA(resource.data.slug));
    }

    match /trash-cans/{documentId} {
      allow read, create, delete;
      allow update: if isAdmin() || (isTA(request.resource.data.course) && isTA(resource.data.course));
    }

    match /posts/{documentId} {
      allow read;
      allow create: if isAdmin() || isTA(request.resource.data.course)
      allow update: if isAdmin() || (isTA(request.resource.data.course) && isTA(resource.data.course));
      allow delete: if isAdmin() || isTA(resource.data.course);
    }

    match /users/{userId} {
      function requestDoesNotChangeAdmin() {
      	return request.resource.data.admin == false;
      }

      function requestDoesNotChangeCourses() {
      	return request.resource.data.courses == resource.data.courses;
      }

      function requestChangesRoles() {
      	return !roleEqual('moderator') || !roleEqual('admin');
      }

      allow read, delete: if request.auth.uid == userId || isAdmin();
      allow create: if requestDoesNotChangeAdmin() && request.resource.data.courses == [];
      allow update: if isAdmin() || (request.auth.uid == userId && requestDoesNotChangeAdmin() && requestDoesNotChangeCourses());
    }
  }
}
