# Number of cans by course and day
r.db('help').table('trashCans').group([
  r.row('departmentSlug'),
  r.row('courseSlug'),
  r.row('created').date()
]).count();

# Average response time 
r.db('help').table('trashCans').filter(
  (can) => {
    return can('retractedBy').ne('student')
})
.withFields(['retractedAt', 'created'])
  .map((can) => {
    return can('retractedAt').sub(can('created'))
})
.avg();

# average response time per course per day
r.db('help').table('trashCans').group([
  r.row('departmentSlug'),
  r.row('courseSlug'),
  r.row('created').date()
]).filter(
  (can) => {
    return can('retractedBy').ne('student')
})
.withFields(['retractedAt', 'created'])
  .map((can) => {
    return can('retractedAt').sub(can('created'))
})
.avg();

# Courses with user objects instead of userIDs
r.db('help').table('courses').merge(
  (u) => {
    return {associatedUsers: u('associatedUserIDs').map(
      (id) => r.db('help').table('users').get(id).without('anon')) 
    }
  }
).without('associatedUserIDs')