import { Injectable } from '@angular/core';
import {AngularFirestore, QueryFn} from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { Course } from '../models/course';
import {CommonService} from './common.service';
import {map} from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class CourseService {
  constructor(private afStore: AngularFirestore) {}

  public getBySlug(slug: string): Observable<Course> {
    return this.getSingle((ref) => {
      return ref.where('slug', '==', slug);
    });
  }

  public getAll(): Observable<Course[]> {
    return this.getMultiple(ref => ref);
  }

  public getAllByInstitute(slug: string): Observable<Course[]> {
    return this.getMultiple((ref) => {
      return ref.where('institute', '==', slug);
    });
  }

  public getAllEnabled(): Observable<Course[]> {
    return this.getMultiple((ref) => {
      return ref.where('enabled', '==', true);
    });
  }

  isActualCourse(slug: string): Observable<boolean> {
    return this.getBySlug(slug).pipe(
      map((course) => {
        return !!course;
      })
    );
  }

  public setCourseEnabled(course: Course) {
    return this.afStore.collection<Course>('courses').doc(course.id).update({enabled: course.enabled});
  }

  public deleteCourse(course: Course) {
    return this.afStore.collection<Course>('courses').doc(course.id).delete();
  }

  public createOrUpdateCourse(course: Course): Promise<void> {
    if (!course.id) {
      // New course, get an autogenerated ID
      course.id = this.afStore.collection<Course>('courses').ref.doc().id;
      return this.afStore.collection<Course>('courses').doc(course.id).set(Object.assign({}, course));
    } else {
      // Course already exists, just update the content
      return this.afStore.collection<Course>('courses').ref.doc(course.id).update(Object.assign({}, course));
    }
  }

  private getSingle(qFn: QueryFn): Observable<Course> {
    return CommonService.getSingle<Course>(this.afStore, 'courses', qFn);
  }

  private getMultiple(qFn: QueryFn): Observable<Course[]> {
    return CommonService.getMultiple<Course>(this.afStore, 'courses', qFn);
  }

}
